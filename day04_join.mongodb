////==================================================================================
////                          UNIONWITH (FULL JOIN)
////==================================================================================
//  - SQL'deki UNION ALL komutuna benzer.
//  - 2 collection'nin birlesimini gerceklestirmek icin kullamilir. 
//  - Ornegin, $unionWith 2 farklı collection'daki pipeline sonuclarini tek bir 
//    sonuc setinde birlesitirir. 
//  - Bu sonuc seti pipeline'da bir sonraki asamaya iletibilir.
//  - SYNTAX:
//  - { $unionWith: { coll: "<collection>", pipeline: [ <stage1>, ... ] } }
////==================================================================================
use("kisiler");
// db.romanlar.insertMany(
// [{"yazar" : "Mehmet Bak", "fiyat" : 60, "yayinEvi" : "Yildiz", "adet": 1000 },
// {"yazar" : "Ali Gel", "fiyat" : 75, "yayinEvi" : "MaviAy", "adet": 1200 },
// {"yazar" : "Su Ak", "fiyat" : 90, "yayinEvi" : "Caliskan", "adet": 2200},
// {"yazar" : "Meryem Can", "fiyat" : 35, "yayinEvi" : "MorEv","adet": 560},
// {"yazar" : "Pelin Su", "fiyat" : 80, "yayinEvi" : "Hedef", "adet": 890 },
// {"yazar" : "Suat Ok", "fiyat" : 54, "yayinEvi" : "Sinir","adet": 245}]);
// db.denemeler.insertMany(
// [{"muellif" : "Mehmet Bak", "fiyat" : 34, "yayinEvi" : "Yildiz", "adet": 400 },
// {"muellif" : "Deniz Kos", "fiyat" : 44, "yayinEvi" : "Yildiz", "adet": 350 },
// {"muellif" : "Su Ak", "fiyat" : 50, "yayinEvi" : "MorEv", "adet": 200},
// {"muellif" : "İsmet Kaç", "fiyat" : 25, "yayinEvi" : "Hedef","adet": 800},
// {"muellif" : "Ali Gel", "fiyat" : 40, "yayinEvi" : "Hedef", "adet": 1200 },
// {"muellif" : "Meryem Can", "fiyat" : 22, "yayinEvi" : "MaviAy","adet": 300}]);
////---------------------------------------------------------------------------------
//// 1)  Her 2 collection'dan tum dokumanlari "adet" sutununa (field) gore siralayarak 
////     listeleyiniz. (FULL JOIN)
// ////---------------------------------------------------------------------------------
// db.romanlar.aggregate([
//  {$unionWith: { coll: "denemeler"}},
//  {$sort:{adet: -1}}
// ]); 
db.denemeler.aggregate([
 {$unionWith: { coll: "romanlar"}},
 {$sort:{adet: -1}},
 {$project: {_id:0}}
]); 
////---------------------------------------------------------------------------------
//// 2) Her bir yayinevinin toplam kitap sayilarini (2 collection icin) hesaplayan 
////    ve siralayan sorguyu yaziniz. 
////---------------------------------------------------------------------------------
db.romanlar.aggregate([
  {$unionWith:{coll:"denemeler"}},
  {$group:{_id:"$yayinEvi", toplamAdet:{$sum:"$adet"}}},
  {$sort: {toplamAdet:1}}
]);
////---------------------------------------------------------------------------------
//// 3) Her bir yayinEvinin kitap (makale ve roman) satislarindan  elde edecegi toplam 
////    geliri hesaplayan sorguyu yaziniz. (carpma icin $multiply)
////---------------------------------------------------------------------------------
db.romanlar.aggregate([
 {$unionWith: {coll:"denemeler"}},
 {$group: {_id:"$yayinEvi", toplamGelir:{$sum:{$multiply:["$fiyat","$adet"]}}}}
]);
////---------------------------------------------------------------------------------
//// 4) Her bir yazarin toplam kitap sayilarini (2 collection icin) hesaplayan 
////    ve siralayan sorguyu yaziniz.  
////    PROBLEM:Collection'lardaki sutun isilerim farklı (yazar, muellif)
////---------------------------------------------------------------------------------
// Grup isimleri ayni olmadigi icin (yazar veya muellif) 2 degerin toplamini almayacaktir.  
db.romanlar.aggregate([
 {$unionWith: {coll: "denemeler"}},
 {$group: {_id:"$yazar", toplamKitap: {$sum: "$adet"}}}
])
////==================================================================================
////                       $LOOKUP (LEFT, RIGHT, INNER JOIN) 
////    {
////      $lookup:
////      {
////        from: <Join uygulanacak collection>,
////        localField: <giris dokumanindaki ilgili sutunu>,
////        foreignField: <Join yapilacak collectiondaki ilgili sutun>,
////        as: <cikis sutunu>
////      }
////   }
////==================================================================================
////---------------------------------------------------------------------------------
//// 5) romanlar collectionda yer alan her bir yazarin toplam kitap sayilarini (
////    2 collection icin) hesaplayan sorguyu yaziniz. (LEFT JOIN)   
////---------------------------------------------------------------------------------
db.romanlar.aggregate(
  {
    $lookup:{
     from:"denemeler",
     localField:"yazar",
     foreignField:"muellif",
     as:"yazarlar"
    }
  },
  {
   $unwind: {path:"$yazarlar", preserveNullAndEmptyArrays:true}
  },
  {
   $project:{toplamKitap: {$add: ["$adet", {$ifNull:["$yazarlar.adet", 0]}]},
   _id:0, yazar:1
   }
  }
);
////---------------------------------------------------------------------------------
//// 6) Her iki collectionda ortak olan yazarlarin toplam kitap sayilarini ve kitap 
////    fiyatlarinin toplamini hesaplayan sorguyu yaziniz. (INNER JOIN)   
////---------------------------------------------------------------------------------
db.romanlar.aggregate([
  {
    $lookup: {
      from:"denemeler", 
      localField:"yazar",     //romanlardaki (PK)
      foreignField:"muellif", // denemelerdeki(FK)
      as:"ortak"              // yeni dokuman icin
    } 
  },
  {
     $unwind:{
        path:"$ortak"
     }
  },w
  {
     $project:{
       toplamFiyat:{$add:["$fiyat","$ortak.fiyat"]},
       toplamAdet:{$add:["$adet","$ortak.adet"]},
       _id:0, yazar:1
     }, 
  }
]);